{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure Red Hat OpenShift with hosted control planes","text":"<p>Azure Red Hat OpenShift with hosted control planes provides single-tenant, high-availability Kubernetes clusters on Azure, supported by Red Hat and Microsoft.</p>"},{"location":"add-pull-secrets/","title":"Add pull secrets to access private registries","text":"<p>You can add additional pull secrets to access container images from private registries.</p> <ol> <li> <p>Create a <code>DockerConfigJSON</code> config file that contains your authentication credentials for the private registry.</p> <p>Example <code>DockerConfigJSON</code> file</p> <pre><code>{\n    \"auths\": {\n        \"registry.example.com\": {\n            \"auth\": \"&lt;base64-encoded-credentials&gt;\"\n        }\n    }\n}\n</code></pre> </li> <li> <p>Base64-encode the <code>DockerConfigJSON</code> file.</p> </li> <li> <p>In your OpenShift cluster, create a <code>Secret</code> object to define your pull secret.</p> <p>Example <code>Secret</code> object for a pull secret</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n    name: &lt;pull-secret-name&gt;\n    namespace: kube-system\ntype: kubernetes.io/dockerconfigjson\ndata:\n    .dockerconfigjson: &lt;base64-encoded-docker-config-json&gt;\n</code></pre> </li> <li> <p>Apply the secret.</p> <pre><code>$ oc apply -f &lt;pull-secret-name&gt;.yaml\n</code></pre> <p>You can now use the pull secret in a pod or service account.</p> </li> </ol>"},{"location":"api/","title":"API reference","text":""},{"location":"architecture/","title":"Azure Red Hat OpenShift with hosted control planes architecture","text":"<p>With Microsoft Azure Red Hat OpenShift with hosted control planes, the control plane is hosted in a Red Hat account and the worker nodes are deployed in the customer\u2019s Azure account. The Azure Red Hat OpenShift with hosted control planes service hosts a highly-available, single-tenant OpenShift control plane. </p> <p>The worker nodes are deployed in your Azure account and run on your virtual network. You can add additional private subnets from one or more availability zones to ensure high availability. Worker nodes are shared by OpenShift components and applications. OpenShift components such as the ingress controller, image registry, and monitoring are deployed on the worker nodes hosted on your virtual network.</p>"},{"location":"cluster-configuration/","title":"Overview of cluster configuration choices","text":"<p>This article explains the main cluster configuration choices you can make when creating an Azure Red Hat OpenShift with hosted control planes cluster. By setting these options, you can customize the cluster to meet your needs.</p> <p>Many of these options can't be changed after the cluster is created. If you need to change any of these options, you must create a new cluster.</p> <p>You can configure the following cluster options:</p> <ul> <li>Cluster name and location</li> <li>OpenShift version</li> <li>Domain prefix</li> <li>Network configuration - Classless Inter-Domain Routing (CIDR) ranges</li> <li>Cluster autoscaling</li> <li>etcd encryption</li> <li>Node drain grace period</li> <li>Image registry</li> </ul> <p>In addition, you can configure the following node pool properties:</p> <ul> <li>Node pool name and location</li> <li>OpenShift version</li> <li>Platform</li> <li>Number of nodes to provision (note: autoscaling and replicas)</li> <li>Labels</li> <li>Taints</li> <li>Node drain grace period</li> </ul>"},{"location":"cluster-configuration/#understand-managed-identities-in-azure-red-hat-openshift-with-hosted-control-planes","title":"Understand managed identities in Azure Red Hat OpenShift with hosted control planes","text":"<p>Managed identities are service principals of a special type, which can be used to control or enable access to Azure resources. In Azure Red Hat OpenShift with hosted control planes, the cluster Operators use managed identities to obtain the temporary permissions required to carry out cluster operations, such as managing back-end storage, cloud provider credentials, and external access to a cluster.</p> <p>For more information about OpenShift cluster Operators, see Cluster Operators in the OpenShift Container Platform documentation.</p> <p>For more information about managed identities, see Understand managed identities in Azure Red Hat OpenShift (preview).</p>"},{"location":"cluster-configuration/#required-managed-identities","title":"Required managed identities","text":"<p>The following OpenShift cluster Operators require managed identities:</p> <ul> <li>OpenShift Cluster API Provider  </li> <li>OpenShift Control Plane Operator  </li> <li>OpenShift Cloud Controller Manager  </li> <li>OpenShift Cluster Ingress Operator  </li> <li>OpenShift Disk Storage Operator (requires two managed identities: one for the control plane, and one for the data plane)  </li> <li>OpenShift File Storage Operator (requires two managed identities: one for the control plane, and one for the data plane)  </li> <li>OpenShift Image Registry Operator (requires two managed identities: one for the control plane, and one for the data plane)  </li> <li>OpenShift Network Operator</li> </ul> <p>In addition, the Azure Red Hat OpenShift Hosted Control Planes Service also requires a user-assigned managed identity to enable the managed identities for the cluster Operators, and to create federated credentials for them.</p>"},{"location":"cluster-configuration/#managed-identity-role-assignments","title":"Managed identity role assignments","text":"<p>Each of the required managed identities must be associated with a built-in Azure role. Roles grant the required permissions to the supporting managed identities to enable cluster operations.</p> <p>The following table lists the required role assignment for each managed identity, and the scope at which the role grants permission to the managed identity.</p> Managed identity Role Scope OpenShift Cluster API Provider Azure Red Hat OpenShift Hosted Control Planes Cluster API Provider. This role enables permissions to allow the cluster API to manage nodes, networks, and disks for the Azure Red Hat OpenShift with hosted control planes cluster. Subnet OpenShift Hosted Control Planes Control Plane Operator Azure Red Hat OpenShift Hosted Control Planes Control Plane Operator. This role enables the Control Plane Operator to read resources necessary for the OpenShift cluster. Subnet and Network Security Group OpenShift Cloud Controller Manager Azure Red Hat OpenShift Cloud Controller Manager Subnet and Network Security Group OpenShift Cluster Ingress Operator Azure Red Hat OpenShift Cluster Ingress Operator Subnet OpenShift Disk Storage Operator (control plane) none n/a OpenShift Disk Storage Operator (data plane) none n/a OpenShift File Storage Operator (control plane) Azure Red Hat OpenShift File Storage Operator Subnet and Network Security Group OpenShift File Storage Operator (data plane) Azure Red Hat OpenShift File Storage Operator Subnet and Network Security Group OpenShift Image Registry Operator (control plane) none n/a OpenShift Image Registry Operator (data plane) none n/a OpenShift Network Operator Azure Red Hat OpenShift Network Operator Vnet and Subnet OpenShift Hosted Control Planes Service Azure Red Hat OpenShift Hosted Control Planes Service. This role can perform the following actions: <ul><li><code>Microsoft.Network/virtualNetworks/read</code></li><li><code>Microsoft.Network/virtualNetworks/subnets/read</code></li><li><code>Microsoft.Network/virtualNetworks/subnets/write</code></li><li><code>Microsoft.Network/routeTables/read</code></li><li><code>Microsoft.Network/routeTables/join/action</code></li><li><code>Microsoft.Network/natGateways/read</code></li><li><code>Microsoft.Network/natGateways/join/action</code></li><li><code>Microsoft.Network/networkSecurityGroups/read</code></li><li><code>Microsoft.Network/networkSecurityGroups/join/action</code></li></ul> Vnet, Subnet, and Network Security Group"},{"location":"create-cluster/","title":"Create a cluster","text":"<p>Microsoft Azure Red Hat OpenShift with hosted control planes is a managed OpenShift service that lets you quickly deploy and manage clusters. With Azure Red Hat OpenShift with hosted control planes, each cluster has a dedicated control plane that is isolated in an Azure service account.</p> <p>This article shows you how to deploy an Azure Red Hat OpenShift with hosted control planes cluster using a Bicep file.</p>"},{"location":"create-cluster/#prerequisites","title":"Prerequisites","text":"<p>Before deploying an Microsoft Azure Red Hat OpenShift with hosted control planes cluster, verify each of the following prerequisites.</p>"},{"location":"create-cluster/#azure-cli-requirement","title":"Azure CLI requirement","text":"<p>Ensure you're using Azure CLI version 2.67.0 or higher. Use <code>az --version</code> to find the version of Azure CLI you installed. If you need to install or upgrade, see Install Azure CLI.</p>"},{"location":"create-cluster/#verify-resource-quota","title":"Verify resource quota","text":"<p>Ensure you have enough resource quota. Azure Red Hat OpenShift with hosted control planes requires a minimum of 20 cores to create and run an OpenShift cluster. The default Azure resource quota for a new Azure subscription doesn't meet the minimum cores requirement. To request an increase in your resource limit, see Standard quota: Increase limits by VM series.</p> <p>For example, to check the current subscription quota of the smallest supported virtual machine family SKU \"Standard DSv5\":</p> <pre><code>$ LOCATION=eastus\n$ az vm list-usage -l $LOCATION \\\n  --query \"[?contains(name.value, 'standardDSv5Family')]\" -o table\n</code></pre>"},{"location":"create-cluster/#verify-permissions","title":"Verify permissions","text":"<p>In this article, you create a resource group which contains the virtual network and managed identities for the cluster. To create a resource group, you need Contributor and User Access Administrator permissions or Owner permissions on the resource group or subscription containing it. For more information, see Verify your permissions.</p>"},{"location":"create-cluster/#register-resource-providers","title":"Register resource providers","text":"<p>The following resource providers must be registered in your Azure subscription:</p> <ul> <li><code>Microsoft.RedHatOpenShift</code> </li> <li><code>Microsoft.Compute</code> </li> <li><code>Microsoft.Storage</code> </li> <li><code>Microsoft.Authorization</code></li> </ul> <p>For more information about how to register any of these resource providers, see Register the resource providers.</p>"},{"location":"create-cluster/#create-a-bicep-file","title":"Create a Bicep file","text":"<p>Create a Bicep file that defines an Azure Red Hat OpenShift with hosted control planes cluster.</p>"},{"location":"create-cluster/#default-resources-to-define","title":"Default resources to define","text":"<p>To create an Azure Red Hat OpenShift with hosted control planes cluster, you must define the following resources:</p> <ul> <li>Network Security Group (NSG)  </li> <li>Virtual network with an empty subnet  </li> <li>A user-assigned managed identity and role assignment for each OpenShift cluster Operator  </li> <li>A service managed identity and role assignments  </li> <li>Hosted control plane (<code>Microsoft.RedHatOpenShift/hcpOpenShiftClusters</code> resource type)  </li> <li>Node pool (<code>Microsoft.RedHatOpenShift/hcpOpenShiftClusters/nodePools</code> resource type)</li> </ul>"},{"location":"create-cluster/#resources-to-define-for-customer-managed-etcd-encryption","title":"Resources to define for customer-managed etcd encryption","text":"<p>If you want to use your own key to encrypt etcd, you must also define these additional resources:</p> <ul> <li>Azure Key Vault</li> <li>Custom KMS key to encrypt the etcd database</li> <li>A user-assigned managed identity to access the KMS key, and a role assignment that grants Key Vault permissions</li> <li>A role assignment that grants <code>Reader</code> permissions to the service managed identity </li> </ul>"},{"location":"create-cluster/#example-bicep-file","title":"Example Bicep file","text":"<p>This example Bicep file defines a cluster that uses a custom KMS key to encrypt the etcd database. You can customize the cluster and node pool configuration properties as needed.</p> <p>Example <code>azuredeploy.bicep</code> file</p> <pre><code>@description('Network Security Group Name')\nparam customerNsgName string\n\n@description('Virtual Network Name')\nparam customerVnetName string\n\n@description('Subnet Name')\nparam customerVnetSubnetName string\n\n@description('Name of the hypershift cluster')\nparam clusterName string\n\n@description('The Hypershift cluster managed resource group name')\nparam managedResourceGroupName string\n\n@description('The name of the node pool')\nparam nodePoolName string\n\nvar etcdEncryptionKeyName = 'etcd-data-kms-encryption-key'\nvar randomSuffix = toLower(uniqueString(clusterName))\nvar randomKeyVaultSuffix = toLower(uniqueString(resourceGroup().id))\nvar customerKeyVaultName string = 'cust-kv-${randomKeyVaultSuffix}'\nvar addressPrefix = '10.0.0.0/16'\nvar subnetPrefix = '10.0.0.0/24'\n\nresource customerNsg 'Microsoft.Network/networkSecurityGroups@2023-05-01' = {\n  name: customerNsgName\n  location: resourceGroup().location\n  tags: {\n    persist: 'true'\n  }\n}\n\nresource customerVnet 'Microsoft.Network/virtualNetworks@2023-05-01' = {\n  name: customerVnetName\n  location: resourceGroup().location\n  tags: {\n    persist: 'true'\n  }\n  properties: {\n    addressSpace: {\n      addressPrefixes: [\n        addressPrefix\n      ]\n    }\n    subnets: [\n      {\n        name: customerVnetSubnetName\n        properties: {\n          addressPrefix: subnetPrefix\n          networkSecurityGroup: {\n            id: customerNsg.id\n          }\n        }\n      }\n    ]\n  }\n}\n\nresource subnet 'Microsoft.Network/virtualNetworks/subnets@2022-07-01' existing = {\n  name: customerVnetSubnetName\n  parent: customerVnet\n}\n\nresource customerKeyVault 'Microsoft.KeyVault/vaults@2024-12-01-preview' = {\n  name: customerKeyVaultName\n  location: resourceGroup().location\n  properties: {\n    enableRbacAuthorization: true\n    enableSoftDelete: false\n    tenantId: subscription().tenantId\n    sku: {\n      family: 'A'\n      name: 'standard'\n    }\n  }\n}\n\nresource etcdEncryptionKey 'Microsoft.KeyVault/vaults/keys@2024-12-01-preview' = {\n  parent: customerKeyVault\n  name: 'etcd-data-kms-encryption-key'\n  properties: {\n    kty: 'RSA'\n    keySize: 2048\n  }\n}\n\n//\n// C O N T R O L   P L A N E   I D E N T I T I E S\n//\n\n// Reader\nvar readerRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  'acdd72a7-3385-48ef-bd42-f606fba81ae7'\n)\n\n//\n// C L U S T E R   A P I   A Z U R E   M I\n//\n\nresource clusterApiAzureMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-cluster-api-azure-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Azure Red Hat OpenShift Hosted Control Planes Cluster API Provider\nvar hcpClusterApiProviderRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  '88366f10-ed47-4cc0-9fab-c8a06148393e'\n)\n\nresource hcpClusterApiProviderRoleSubnetAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, clusterApiAzureMi.id, hcpClusterApiProviderRoleId, subnet.id)\n  scope: subnet\n  properties: {\n    principalId: clusterApiAzureMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: hcpClusterApiProviderRoleId\n  }\n}\n\nresource serviceManagedIdentityReaderOnClusterApiAzureMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, clusterApiAzureMi.id)\n  scope: clusterApiAzureMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// K M S   M I\n//\n\nresource kmsMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-kms-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Key Vault Crypto User\nvar keyVaultCryptoUserRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  '12338af0-0e69-4776-bea7-57ae8d297424'\n)\n\nresource keyVaultCryptoUserToKeyVaultRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, kmsMi.id, keyVaultCryptoUserRoleId, customerKeyVault.id)\n  scope: customerKeyVault\n  properties: {\n    principalId: kmsMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: keyVaultCryptoUserRoleId\n  }\n}\n\nresource serviceManagedIdentityReaderOnKmsMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, kmsMi.id)\n  scope: kmsMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// C O N T R O L   P L A N E   O P E R A T O R   M A N A G E D   I D E N T I T Y\n//\n\nresource controlPlaneMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-control-plane-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Azure Red Hat OpenShift Hosted Control Planes Control Plane Operator\nvar hcpControlPlaneOperatorRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  'fc0c873f-45e9-4d0d-a7d1-585aab30c6ed'\n)\n\nresource hcpControlPlaneOperatorVnetRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, controlPlaneMi.id, hcpControlPlaneOperatorRoleId, customerVnet.id)\n  scope: customerVnet\n  properties: {\n    principalId: controlPlaneMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: hcpControlPlaneOperatorRoleId\n  }\n}\n\nresource hcpControlPlaneOperatorNsgRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, controlPlaneMi.id, hcpControlPlaneOperatorRoleId, customerNsg.id)\n  scope: customerNsg\n  properties: {\n    principalId: controlPlaneMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: hcpControlPlaneOperatorRoleId\n  }\n}\n\nresource serviceManagedIdentityReaderOnControlPlaneMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, controlPlaneMi.id)\n  scope: controlPlaneMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// C L O U D   C O N T R O L L E R   M A N A G E R   M A N A G E D   I D E N T I T Y\n//\n\nresource cloudControllerManagerMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-cloud-controller-manager-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Azure Red Hat OpenShift Cloud Controller Manager\nvar cloudControllerManagerRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  'a1f96423-95ce-4224-ab27-4e3dc72facd4'\n)\n\nresource cloudControllerManagerRoleSubnetAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, cloudControllerManagerMi.id, cloudControllerManagerRoleId, subnet.id)\n  scope: subnet\n  properties: {\n    principalId: cloudControllerManagerMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: cloudControllerManagerRoleId\n  }\n}\n\nresource cloudControllerManagerRoleNsgAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, cloudControllerManagerMi.id, cloudControllerManagerRoleId, customerNsg.id)\n  scope: customerNsg\n  properties: {\n    principalId: cloudControllerManagerMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: cloudControllerManagerRoleId\n  }\n}\n\nresource serviceManagedIdentityReaderOnCloudControllerManagerMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, cloudControllerManagerMi.id)\n  scope: cloudControllerManagerMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// I N G R E S S   M A N A G E D   I D E N T I T Y\n//\n\nresource ingressMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-ingress-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Azure Red Hat OpenShift Cluster Ingress Operator\nvar ingressOperatorRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  '0336e1d3-7a87-462b-b6db-342b63f7802c'\n)\n\nresource ingressOperatorRoleSubnetAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, ingressMi.id, ingressOperatorRoleId, subnet.id)\n  scope: subnet\n  properties: {\n    principalId: ingressMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: ingressOperatorRoleId\n  }\n}\n\nresource serviceManagedIdentityReaderOnIngressMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, ingressMi.id)\n  scope: ingressMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// D I S K   C S I   D R I V E R   M A N A G E D   I D E N T I T Y\n//\n\nresource diskCsiDriverMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-disk-csi-driver-${randomSuffix}'\n  location: resourceGroup().location\n}\n\nresource serviceManagedIdentityReaderOnDiskCsiDriverMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, diskCsiDriverMi.id)\n  scope: diskCsiDriverMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// F I L E   C S I   D R I V E R   M A N A G E D   I D E N T I T Y\n//\n\nresource fileCsiDriverMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-file-csi-driver-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Azure Red Hat OpenShift File Storage Operator\nvar fileStorageOperatorRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  '0d7aedc0-15fd-4a67-a412-efad370c947e'\n)\n\nresource fileStorageOperatorRoleSubnetAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, fileCsiDriverMi.id, fileStorageOperatorRoleId, subnet.id)\n  scope: subnet\n  properties: {\n    principalId: fileCsiDriverMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: fileStorageOperatorRoleId\n  }\n}\n\nresource fileStorageOperatorRoleNsgAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, fileCsiDriverMi.id, fileStorageOperatorRoleId, customerNsg.id)\n  scope: customerNsg\n  properties: {\n    principalId: fileCsiDriverMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: fileStorageOperatorRoleId\n  }\n}\n\nresource serviceManagedIdentityReaderOnFileCsiDriverMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, fileCsiDriverMi.id)\n  scope: fileCsiDriverMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// I M A G E   R E G I S T R Y   M A N A G E D   I D E N T I T Y\n//\n\nresource imageRegistryMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-image-registry-${randomSuffix}'\n  location: resourceGroup().location\n}\n\nresource serviceManagedIdentityReaderOnImageRegistryMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, imageRegistryMi.id)\n  scope: imageRegistryMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// C L O U D   N E T W O R K   C O N F I G   M A N A G E D   I D E N T I T Y\n//\n\nresource cloudNetworkConfigMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-cp-cloud-network-config-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Azure Red Hat OpenShift Network Operator\nvar networkOperatorRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  'be7a6435-15ae-4171-8f30-4a343eff9e8f'\n)\n\nresource networkOperatorRoleSubnetAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, cloudNetworkConfigMi.id, networkOperatorRoleId, subnet.id)\n  scope: subnet\n  properties: {\n    principalId: cloudNetworkConfigMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: networkOperatorRoleId\n  }\n}\n\nresource networkOperatorRoleVnetAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, cloudNetworkConfigMi.id, networkOperatorRoleId, customerVnet.id)\n  scope: customerVnet\n  properties: {\n    principalId: cloudNetworkConfigMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: networkOperatorRoleId\n  }\n}\n\nresource serviceManagedIdentityReaderOnCloudNetworkMi 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, readerRoleId, cloudNetworkConfigMi.id)\n  scope: cloudNetworkConfigMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: readerRoleId\n  }\n}\n\n//\n// D A T A P L A N E   I D E N T I T I E S\n//\n\n// Azure Red Hat OpenShift Federated Credential\n// give the ability to perform OIDC federation to the service managed identity\n// over the corresponding dataplane identities\nvar federatedCredentialsRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  'ef318e2a-8334-4a05-9e4a-295a196c6a6e'\n)\n\nresource dpDiskCsiDriverMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-dp-disk-csi-driver-${randomSuffix}'\n  location: resourceGroup().location\n}\n\nresource dpDiskCsiDriverMiFederatedCredentialsRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, dpDiskCsiDriverMi.id, federatedCredentialsRoleId)\n  scope: dpDiskCsiDriverMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: federatedCredentialsRoleId\n  }\n}\n\nresource dpFileCsiDriverMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-dp-file-csi-driver-${randomSuffix}'\n  location: resourceGroup().location\n}\n\nresource dpFileCsiDriverMiFederatedCredentialsRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, dpFileCsiDriverMi.id, federatedCredentialsRoleId)\n  scope: dpFileCsiDriverMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: federatedCredentialsRoleId\n  }\n}\n\nresource dpFileCsiDriverFileStorageOperatorRoleSubnetAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, dpFileCsiDriverMi.id, fileStorageOperatorRoleId, subnet.id)\n  scope: subnet\n  properties: {\n    principalId: dpFileCsiDriverMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: fileStorageOperatorRoleId\n  }\n}\n\nresource dpFileCsiDriverFileStorageOperatorRoleNsgAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, dpFileCsiDriverMi.id, fileStorageOperatorRoleId, customerNsg.id)\n  scope: customerNsg\n  properties: {\n    principalId: dpFileCsiDriverMi.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: fileStorageOperatorRoleId\n  }\n}\n\nresource dpImageRegistryMi 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-dp-image-registry-${randomSuffix}'\n  location: resourceGroup().location\n}\n\nresource dpImageRegistryMiFederatedCredentialsRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, dpImageRegistryMi.id, federatedCredentialsRoleId)\n  scope: dpImageRegistryMi\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: federatedCredentialsRoleId\n  }\n}\n\n//\n// S E R V I C E   M A N A G E D   I D E N T I T Y\n//\n\nresource serviceManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {\n  name: '${clusterName}-service-managed-identity-${randomSuffix}'\n  location: resourceGroup().location\n}\n\n// Azure Red Hat OpenShift Hosted Control Planes Service Managed Identity\nvar hcpServiceManagedIdentityRoleId = subscriptionResourceId(\n  'Microsoft.Authorization/roleDefinitions',\n  'c0ff367d-66d8-445e-917c-583feb0ef0d4'\n)\n\n// grant service managed identity role to the service managed identity over the user provided subnet\nresource serviceManagedIdentityRoleAssignmentVnet 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, hcpServiceManagedIdentityRoleId, customerVnet.id)\n  scope: customerVnet\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: hcpServiceManagedIdentityRoleId\n  }\n}\n\n// grant service managed identity role to the service managed identity over the user provided subnet\nresource serviceManagedIdentityRoleAssignmentSubnet 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, hcpServiceManagedIdentityRoleId, subnet.id)\n  scope: subnet\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: hcpServiceManagedIdentityRoleId\n  }\n}\n\n// grant service managed identity role to the service managed identity over the user provided NSG\nresource serviceManagedIdentityRoleAssignmentNSG 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(resourceGroup().id, serviceManagedIdentity.id, hcpServiceManagedIdentityRoleId, customerNsg.id)\n  scope: customerNsg\n  properties: {\n    principalId: serviceManagedIdentity.properties.principalId\n    principalType: 'ServicePrincipal'\n    roleDefinitionId: hcpServiceManagedIdentityRoleId\n  }\n}\n\nresource hcp 'Microsoft.RedHatOpenShift/hcpOpenShiftClusters@2024-06-10-preview' = {\n  name: clusterName\n  location: resourceGroup().location\n  properties: {\n    version: {\n      id: '4.19'\n      channelGroup: 'stable'\n    }\n    dns: {}\n    network: {\n      networkType: 'OVNKubernetes'\n      podCidr: '10.128.0.0/14'\n      serviceCidr: '172.30.0.0/16'\n      machineCidr: '10.0.0.0/16'\n      hostPrefix: 23\n    }\n    console: {}\n    etcd: {\n      dataEncryption: {\n        keyManagementMode: 'CustomerManaged'\n        customerManaged: {\n          encryptionType: 'kms'\n          kms: {\n            activeKey: {\n              vaultName: customerKeyVaultName\n              name: etcdEncryptionKeyName\n              version: last(split(etcdEncryptionKey.properties.keyUriWithVersion, '/'))\n            }\n          }\n        }\n      }\n    }\n    api: {\n      visibility: 'Public'\n    }\n    clusterImageRegistry: {\n      state: 'Enabled'\n    }\n    platform: {\n      managedResourceGroup: managedResourceGroupName\n      subnetId: subnet.id\n      outboundType: 'LoadBalancer'\n      networkSecurityGroupId: customerNsg.id\n      operatorsAuthentication: {\n        userAssignedIdentities: {\n          controlPlaneOperators: {\n            'cluster-api-azure': clusterApiAzureMi.id\n            'control-plane': controlPlaneMi.id\n            'cloud-controller-manager': cloudControllerManagerMi.id\n            #disable-next-line prefer-unquoted-property-names\n            'ingress': ingressMi.id\n            'disk-csi-driver': diskCsiDriverMi.id\n            'file-csi-driver': fileCsiDriverMi.id\n            'image-registry': imageRegistryMi.id\n            'cloud-network-config': cloudNetworkConfigMi.id\n            'kms': kmsMi.id\n          }\n          dataPlaneOperators: {\n            'disk-csi-driver': dpDiskCsiDriverMi.id\n            'file-csi-driver': dpFileCsiDriverMi.id\n            'image-registry': dpImageRegistryMi.id\n          }\n          serviceManagedIdentity: serviceManagedIdentity.id\n        }\n      }\n    }\n  }\n  identity: {\n    type: 'UserAssigned'\n    userAssignedIdentities: {\n      '${serviceManagedIdentity.id}': {}\n      '${clusterApiAzureMi.id}': {}\n      '${controlPlaneMi.id}': {}\n      '${cloudControllerManagerMi.id}': {}\n      '${ingressMi.id}': {}\n      '${diskCsiDriverMi.id}': {}\n      '${fileCsiDriverMi.id}': {}\n      '${imageRegistryMi.id}': {}\n      '${cloudNetworkConfigMi.id}': {}\n      '${kmsMi.id}': {}\n    }\n  }\n  dependsOn: [\n    hcpClusterApiProviderRoleSubnetAssignment\n    keyVaultCryptoUserToKeyVaultRoleAssignment\n    hcpControlPlaneOperatorVnetRoleAssignment\n    hcpControlPlaneOperatorNsgRoleAssignment\n    cloudControllerManagerRoleSubnetAssignment\n    cloudControllerManagerRoleNsgAssignment\n    ingressOperatorRoleSubnetAssignment\n    fileStorageOperatorRoleSubnetAssignment\n    fileStorageOperatorRoleNsgAssignment\n    networkOperatorRoleSubnetAssignment\n    networkOperatorRoleVnetAssignment\n    dpDiskCsiDriverMiFederatedCredentialsRoleAssignment\n    dpFileCsiDriverMiFederatedCredentialsRoleAssignment\n    dpImageRegistryMiFederatedCredentialsRoleAssignment\n    serviceManagedIdentityRoleAssignmentVnet\n    serviceManagedIdentityRoleAssignmentSubnet\n    serviceManagedIdentityRoleAssignmentNSG\n    dpFileCsiDriverFileStorageOperatorRoleSubnetAssignment\n    dpFileCsiDriverFileStorageOperatorRoleNsgAssignment\n    serviceManagedIdentityReaderOnControlPlaneMi\n    serviceManagedIdentityReaderOnCloudControllerManagerMi\n    serviceManagedIdentityReaderOnIngressMi\n    serviceManagedIdentityReaderOnDiskCsiDriverMi\n    serviceManagedIdentityReaderOnFileCsiDriverMi\n    serviceManagedIdentityReaderOnImageRegistryMi\n    serviceManagedIdentityReaderOnCloudNetworkMi\n    serviceManagedIdentityReaderOnClusterApiAzureMi\n    serviceManagedIdentityReaderOnKmsMi\n  ]\n}\n\nresource nodepool 'Microsoft.RedHatOpenShift/hcpOpenShiftClusters/nodePools@2024-06-10-preview' = {\n  parent: hcp\n  name: nodePoolName\n  location: resourceGroup().location\n  properties: {\n    version: {\n      id: '4.19.0'\n      channelGroup: 'stable'\n    }\n    platform: {\n      subnetId: hcp.properties.platform.subnetId\n      vmSize: 'Standard_D8s_v3'\n      osDisk: {\n        sizeGiB: 64\n        diskStorageAccountType: 'StandardSSD_LRS'\n      }\n    }\n    replicas: 2\n  }\n}\n</code></pre>"},{"location":"create-cluster/#create-the-cluster-using-bicep","title":"Create the cluster using Bicep","text":"<p>This section describes how to use Bicep to create the cluster. </p> <ol> <li> <p>Set the following variables in the shell environment that you plan to execute the az commands.</p> <pre><code># location of your cluster\nLOCATION=\"&lt;location&gt;\"\n\n# name of your subscription\nSUBSCRIPTION=\"&lt;subscription-name&gt;\"\n\n# name of the resource group where you want to create your cluster\nCUSTOMER_RG_NAME=\"$USER-net-rg-03\"\n\n# name of the nsg\nCUSTOMER_NSG=\"&lt;nsg-name&gt;\"\n\n# name of the vnet\nCUSTOMER_VNET_NAME=\"&lt;vnet-name&gt;\"\n\n# name of the subnet within the vnet\nCUSTOMER_VNET_SUBNET1=\"&lt;subnet-name&gt;\"\n\n# name of your cluster\nCLUSTER_NAME=\"&lt;cluster-name&gt;\"\n\n# name of the managed resource group\nMANAGED_RESOURCE_GROUP=\"$CLUSTER_NAME-rg-03\"\n\n# name of the node pool\nNP_NAME=\"&lt;node-pool-name&gt;\"\n\n# optional variables for creating tags\nSUBSCRIPTION_ID=$(az account show --query id --output tsv)\nPOLICY_DEFINITION=\"&lt;policy-name&gt;\"\nPOLICY_ASSIGNMENT=\"${POLICY_DEFINITION}-${CLUSTER_NAME}\"\n</code></pre> </li> <li> <p>Create a resource group to hold the cluster resource, node pool resource, and the cluster virtual network and identities.</p> <pre><code>$ az group create \\\n  --name \"${CUSTOMER_RG_NAME}\" \\\n  --subscription \"${SUBSCRIPTION}\" \\\n  --location \"${LOCATION}\"\n</code></pre> </li> <li> <p>(Optional) If desired, define tags that will be applied to each of the resources in your managed resource group.</p> <p>Follow these steps to use Azure Policy to tag the resources in your managed resource group. When you create the Azure Red Hat OpenShift with hosted control planes cluster, these tags will be applied to the managed resource group, and to each of the resources within it:</p> <ol> <li> <p>Create the following JSON files to define the tags:</p> <ul> <li>Rules file</li> <li>Parameter definitions</li> <li>Parameter values</li> </ul> </li> <li> <p>Create the policy definition.</p> <pre><code>$ az policy definition create -n $POLICY_DEFINITION \\\n  --mode All \\\n  --rules rules.json \\\n  --params param-defs.json\n</code></pre> </li> <li> <p>Create the policy assignment.</p> <pre><code>$ az policy assignment create -n $POLICY_ASSIGNMENT \\\n  --policy $POLICY_DEFINITION \\\n  --scope \"/subscriptions/${SUBSCRIPTION_ID}\" \\\n  --location $LOCATION \\\n  --mi-system-assigned \\\n  --role \"Tag Contributor\" \\\n  --identity-scope \"/subscriptions/${SUBSCRIPTION_ID}\" \\\n  --params param-values.json\n</code></pre> </li> </ol> </li> <li> <p>Apply the Bicep file.</p> <pre><code>$ az deployment group create \\\n--name 'aro-hcp' \\\n--subscription \"${SUBSCRIPTION}\" \\\n--resource-group \"${CUSTOMER_RG_NAME}\" \\\n--template-file azuredeploy.bicep \\\n--parameters \\\n  customerNsgName=\"${CUSTOMER_NSG}\" \\\n  customerVnetName=\"${CUSTOMER_VNET_NAME}\" \\\n  customerVnetSubnetName=\"${CUSTOMER_VNET_SUBNET1}\" \\\n  clusterName=\"${CLUSTER_NAME}\" \\\n  managedResourceGroupName=\"${MANAGED_RESOURCE_GROUP}\" \\\n  nodePoolName=\"${NP_NAME}\"\n</code></pre> </li> <li> <p>(Optional) If desired, create a tag for the managed resource group.</p> <pre><code>$ az tag create \\\n--resource-id /subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${MANAGED_RESOURCE_GROUP} \\\n--tags &lt;tag-key&gt;=&lt;tag-value&gt;\n</code></pre> </li> </ol>"},{"location":"create-cluster/#access-the-cluster","title":"Access the cluster","text":"<p>After creating an Azure Red Hat OpenShift with hosted control planes cluster, you can request a temporary administrative credential to access your cluster.</p> <p>Requesting an administrative credential generates a new cluster-admin <code>kubeconfig</code> file. The <code>kubeconfig</code> file contains information about the cluster that connects a client to the correct cluster and API server. You can use the newly generated <code>kubeconfig</code> file to allow access to the cluster.</p> <p>Administrative credentials expire after 24 hours. You can request multiple administrative credentials for a cluster. You can also revoke all administrative credentials for the cluster.</p> <ol> <li> <p>Request an administrative credential.</p> <pre><code>$ az rest \\\n  --method POST \\\n  --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}/requestAdminCredential?api-version=2024-06-10-preview\" \\\n  --verbose\n</code></pre> <p>The admin credential is generated as an asynchronous Azure operation.  </p> </li> <li> <p>Monitor the status of the operation.</p> <ol> <li> <p>In the response headers, find the URL listed in the <code>Azure-AsyncOperation</code> field.</p> </li> <li> <p>Use the <code>Azure-AsyncOperation</code> URL to get the status.</p> <pre><code>$ az rest \\\n  --method GET \\\n  --uri \"&lt;url-from-Azure-AsyncOperation-field&gt;\"\n</code></pre> </li> </ol> </li> <li> <p>Get the newly-generated <code>kubeconfig</code> content and save it as a <code>kubeconfig</code> file.</p> <ol> <li> <p>In the response headers from the original operation, find the URL listed in the <code>Location</code> field.</p> </li> <li> <p>Use the <code>Location</code> field URL to get the <code>kubeconfig</code> file.</p> <pre><code>$ az rest \\\n  --method GET \\\n  --uri \"&lt;url-from-Location-field&gt;\" \\\n  |  jq -r '.kubeconfig' &gt; kubeconfig\n</code></pre> </li> </ol> </li> <li> <p>Verify that you have the correct credentials:</p> <pre><code>$ export KUBECONFIG=kubeconfig\n$ kubectl auth whoami --insecure-skip-tls-verify=true\nATTRIBUTE    VALUE\nUsername     system:customer-break-glass:&lt;user-id&gt;\nGroups       [system:masters system:authenticated]\nExtra: authentication.kubernetes.io/credential-id   &lt;credential-id&gt;\n</code></pre> </li> <li> <p>If desired, revoke all administrative credentials for the cluster:</p> <pre><code>$ az rest \\\n  --method POST \\\n  --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}/revokeCredentials?api-version=2024-06-10-preview\"\n</code></pre> </li> </ol>"},{"location":"create-cluster/#clean-up","title":"Clean up","text":"<p>When you are done using your Azure Red Hat OpenShift with hosted control planes cluster, you can delete it.</p> <ol> <li> <p>Delete the cluster (the <code>hcpOpenShiftClusters</code> resource).</p> <p>Deleting the <code>hcpOpenShiftClusters</code> resource deletes the cluster, its node pools, and the managed resource group.</p> <pre><code>$ az rest \\\n  --method DELETE \\\n  --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}?api-version=2024-06-10-preview\"\n</code></pre> </li> <li> <p>Verify that the cluster is deleted.</p> <pre><code>$ az rest \\\n  --method GET \\\n  --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}?api-version=2024-06-10-preview\"\n</code></pre> </li> <li> <p>Delete the resource group.</p> <pre><code>$ az group delete --name ${CUSTOMER_RG_NAME}\n</code></pre> </li> </ol>"},{"location":"external-auth/","title":"Create an external authentication provider","text":"<p>In OpenShift, an external authentication provider is any system outside the cluster that handles user authentication on its behalf. Instead of creating and managing local accounts within OpenShift, you can connect the cluster to Microsoft Entra ID.</p> <p>This article describes how to configure Microsoft Entra ID as an external authentication provider to provide access to both the CLI and the OpenShift console.</p>"},{"location":"external-auth/#prepare-environment-variables","title":"Prepare environment variables","text":"<p>Make sure that the following environment variables are defined:</p> <pre><code>SUBSCRIPTION=\"&lt;subscription-name&gt;\"\nSUBSCRIPTION_ID=$(az account show --query id --output tsv)\nCUSTOMER_RG_NAME=\"&lt;resource-group-name&gt;\"\nCLUSTER_NAME=\"&lt;cluster-name&gt;\"\nEXTERNAL_AUTH_NAME=${CLUSTER_NAME}-auth\nTENANT_ID=$(az account show --query tenantId --output tsv)\nISSUER_URL=\"https://login.microsoftonline.com/${TENANT_ID}/v2.0\"\n</code></pre>"},{"location":"external-auth/#configure-microsoft-entra-id","title":"Configure Microsoft Entra ID","text":"<ol> <li> <p>Retrieve the OpenShift Authentication call back URL.</p> <pre><code>$ OAUTH_CALLBACK_URL=$(az rest --method GET --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}?api-version=2024-06-10-preview\" | jq -r '.properties.console.url')/auth/callback\n</code></pre> </li> <li> <p>Register a new application in Microsoft Entra ID.</p> <p>If you would like to access the API server via the <code>oc</code> or <code>kubectl</code> CLIs, you must add a second redirect URI.</p> <p>The following example creates a Microsoft Entra ID application with two redirect URIs: the required OpenShift Authentication call back URL, and a second redirect for CLI access:</p> <pre><code>$ CLIENT_ID=$(az ad app create \\\n  --display-name ${EXTERNAL_AUTH_NAME} \\\n  --web-redirect-uris ${OAUTH_CALLBACK_URL} http://localhost:8000 \\\n  --query appId --output tsv)\n</code></pre> </li> <li> <p>Create a client secret for the application.</p> <p>A console message is displayed notifying you that the command output contains credentials. The client secret is used later in this article. </p> <p>Note</p> <p>When you\u2019re finished, you can clear the variable by entering the <code>clientSecret=\"\"</code> command.</p> <pre><code>$ CLIENT_SECRET=$(az ad app credential reset --id ${CLIENT_ID} --query password --output tsv)\n</code></pre> </li> </ol>"},{"location":"external-auth/#configure-optional-claims","title":"Configure optional claims","text":"<p>To provide OpenShift with enough information to identify the user, configure Microsoft Entra ID to provide an email optional claim when a user logs in. For more information on optional claims, see Configure and manage optional claims in ID tokens, access tokens, and SAML tokens.</p> <ol> <li> <p>Create a <code>manifest.json</code> file to configure the optional claims.</p> <p>The following example configures three optional claims: email, groups, and preferred username:</p> <pre><code>$ cat &gt; manifest.json&lt;&lt; EOF\n{\n\"idToken\": [\n    {\n    \"name\": \"email\",\n    \"source\": null,\n    \"essential\": false,\n    \"additionalProperties\": []\n    },\n    {\n    \"name\": \"groups\",\n    \"source\": null,\n    \"essential\": false,\n    \"additionalProperties\": []\n    }\n],\n\"accessToken\": [\n    {\n    \"name\": \"groups\",\n    \"source\": null,\n    \"essential\": false,\n    \"additionalProperties\": []\n    }\n],\n\"saml2Token\": [\n    {\n    \"name\": \"groups\",\n    \"source\": null,\n    \"essential\": false,\n    \"additionalProperties\": []\n    }\n]\n}\nEOF\n</code></pre> </li> <li> <p>Update the Microsoft Entra ID application to use the optional claims that you defined in the manifest.</p> <pre><code>$ az ad app update \\\n  --id ${CLIENT_ID} \\\n  --optional-claims @manifest.json\n</code></pre> </li> <li> <p>Assign the Microsoft Graph email permission to your Microsoft Entra ID application. </p> <p>This permission enables the ability to read a user\u2019s email address from Microsoft Entra ID.</p> <pre><code>$ az ad app permission add \\\n  --api 00000003-0000-0000-c000-000000000000 \\\n  --api-permissions 64a6cdd6-aab1-4aaf-94b8-3cc8405e90d0=Scope \\\n  --id ${CLIENT_ID}\n</code></pre> <p>Ignore the message to grant the consent unless you\u2019re authenticated as a Global Administrator for this Microsoft Entra ID. Standard domain users are asked to grant consent when they first sign in to the cluster with their Microsoft Entra credentials.</p> </li> </ol>"},{"location":"external-auth/#create-an-external-authentication-provider_1","title":"Create an external authentication provider","text":"<ol> <li> <p>Retrieve the API URL.</p> <pre><code>$ API_URL=$(az rest --method GET --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}?api-version=2024-06-10-preview\" | jq -r '.properties.api.url')\n</code></pre> </li> <li> <p>Configure the external authentication provider for Azure Red Hat OpenShift with hosted control planes.</p> <p>To configure an external authentication provider, you must define an <code>externalAuths</code> resource. The following example shows an <code>externalAuths</code> resource in a Bicep file.</p> <p>Example external authentication provider configuration (<code>externalauth.bicep</code>)</p> <pre><code>@description('The name of the external auth provider configuration')    \nparam externalAuthName string\n\n@description('The issuer url')\nparam issuerURL string\n\n@description('The client ID')\nparam clientID string\n\n@description('Name of the hypershift cluster')\nparam clusterName string\n\nresource hcp 'Microsoft.RedHatOpenShift/hcpOpenShiftClusters@2024-06-10-preview' existing = {\n    name: clusterName\n}\n\nresource externalauth 'Microsoft.RedHatOpenShift/hcpOpenShiftClusters/externalAuths@2024-06-10-preview' = {\n    parent: hcp\n    name: externalAuthName\n    properties: {\n        claim: {\n            mappings: {\n                username: {\n                    claim: 'email'\n                }\n                groups: {\n                    claim: 'groups'\n                }\n            }\n        }\n        clients: [\n            {\n                clientId: clientID\n                component: {\n                    name: 'console'\n                    authClientNamespace: 'openshift-console'\n                }\n                type: 'confidential'\n            }\n            {\n                clientId: clientID\n                component: {\n                    name: 'cli'\n                    authClientNamespace: 'openshift-console'\n                }\n                type: 'public'\n            }\n        ]\n        issuer: {\n            url: issuerURL\n            audiences: [\n                clientID\n            ]\n        }\n    }\n}\n</code></pre> <code>claim.mappings.username</code> <p>The name of the claim that is used to construct the user names for cluster identity. You can configure the following properties for the claim user name:</p> <code>claim.mappings.username.claim</code> The claim name. <code>claim.mappings.username.prefix</code> Optional. The prefix for the claim external profile. If you set the prefix, <code>prefixPolicy</code> will be set to <code>Prefix</code> by default. <code>claim.mappings.username.prefixPolicy</code> Optional. Defines how a prefix should be applied to the value of the JWT claim specified in the claim property. You can set this to <code>Prefix</code> (the claim name will be prefixed with the value of the prefix property), <code>NoPrefix</code> (no prefix will be added to the claim name), or leave the property unset (the platform will define the claim name prefix). <code>claim.mappings.groups</code> <p>Optional. The method with which to transform the ID token into a cluster identity. You can configure the following properties for the claim mapping groups:</p> <ul> <li><code>claim.mappings.groups.claim</code> - The claim name.</li> <li><code>claim.mappings.groups.prefix</code> - Optional. The prefix for the claim external profile.</li> </ul> <code>claim.validationRules</code> Optional. The rules that help validate token claims which authenticate your users. To add a validation rule, configure the <code>claim.validationRules.requiredClaim</code> property.  <code>clients</code> <p>Optional. Configures how on-cluster, platform clients should request tokens from the identity provider. Must not exceed 20 entries and entries must have unique namespace/name pairs.</p> <p>For each client, you can configure the following properties:</p> <ul> <li><code>clients.component.name</code>  - The name of the platform component being configured to use the identity provider as an authentication mode.</li> <li><code>clients.component.authClientNamespace</code> - The namespace in which the platform component being configured to use the identity provider as an authentication mode is running.</li> <li><code>clients.clientId</code> - The client identifier, from the identity provider, that the platform component uses for authentication requests made to the identity provider. The identity provider must accept this identifier for platform components to be able to use the identity provider as an authentication mode. The client ID must be available in the issuer audiences.</li> <li><code>clients.extraScopes</code> - Optional. The extra scopes that should be requested by the platform component when making authentication requests to the identity provider. This is useful if you have configured claim mappings that require specific scopes to be requested beyond the standard OIDC scopes. When omitted, no additional scopes are requested.</li> <li><code>clients.type</code> - The client type (either confidential or public). Confidential clients must provide a client secret for authentication requests. Public clients don\u2019t have to provide a client secret. The only supported confidential client is <code>console/openshift-console</code>.</li> </ul> <code>issuer.url</code> <p>Required. The URL of the token issuer.</p> <p>The Kubernetes API server determines how authentication tokens should be handled by matching the <code>iss</code> claim in the JWT to the issuer URL of configured identity providers. This field must use the <code>https://</code> scheme.</p> <code>issuer.audiences</code> Required. The audience IDs for which this authentication provider issues tokens. You must configure at least one audience, and can configure up to ten total audiences. At least one of the entries must match the <code>aud</code> claim in the JWT token. <code>issuer.ca</code> Optional. The PEM encoded certificate to use when making requests. If you don\u2019t specify a CA, the system trust is used. </li> <li> <p>Apply the Bicep file.</p> <pre><code>$ az deployment group create \\\n  --name 'aro-hcp-auth' \\\n  --subscription \"${SUBSCRIPTION}\" \\\n  --resource-group \"${CUSTOMER_RG_NAME}\" \\\n  --template-file externalauth.bicep \\\n  --parameters \\\n    externalAuthName=\"${EXTERNAL_AUTH_NAME}\" \\\n    issuerURL=\"${ISSUER_URL}\" \\\n    clientID=\"${CLIENT_ID}\" \\\n    clusterName=\"${CLUSTER_NAME}\"\n</code></pre> </li> <li> <p>Verify the external authentication provider configuration.</p> <pre><code>$ az rest --method GET --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}/externalAuths/${EXTERNAL_AUTH_NAME}?api-version=2024-06-10-preview\"\n</code></pre> </li> </ol>"},{"location":"external-auth/#configure-authentication-and-authorization-in-openshift","title":"Configure authentication and authorization in OpenShift","text":"<p>After creating the external authentication provider, you must log into your Azure Red Hat OpenShift with hosted control planes cluster to configure access for your confidential client (the OpenShift console), and to set up role-based access control (RBAC).</p> <ol> <li> <p>If you don\u2019t have a temporary administrative credential for your Azure Red Hat OpenShift with hosted control planes cluster, generate one.</p> <p>For more information, see Access the cluster.</p> <p>Your cluster doesn\u2019t use the built-in OpenShift OAuth server to act as a separate identity provider. This means there isn\u2019t a standalone cluster-admin account with which you can access the cluster. Instead, you must request a temporary administrative credential, which provides a <code>kubeconfig</code> with cluster-admin privileges.</p> </li> <li> <p>Using the <code>kubeconfig</code> file from the temporary admin credential, create a secret in the <code>openshift-config</code> namespace to store the client secret for your Microsoft Entra application.</p> <p>This example creates a secret that enables the OpenShift console to use the external authentication provider for authentication:</p> <pre><code>$ oc create secret generic ${EXTERNAL_AUTH_NAME}-console-openshift-console \\\n  --namespace openshift-config \\\n  --from-literal=clientSecret=${CLIENT_SECRET}\n</code></pre> </li> <li> <p>(Optional) If necessary, assign users and groups to your Azure Red Hat OpenShift with hosted control planes cluster.</p> <p>Applications registered in a Microsoft Entra tenant are, by default, available to all users of the tenant who authenticate successfully. Microsoft Entra ID allows tenant administrators and developers to restrict an app to a specific set of users or security groups in the tenant.</p> <p>Follow the instructions on the Microsoft Entra documentation to Restrict a Microsoft Entra app to a set of users.</p> </li> <li> <p>Configure RBAC for your cluster.</p> <p>By default, OpenShift does not grant permissions to take any action inside of your cluster when a user first logs in. Azure Red Hat OpenShift with hosted control planes includes a significant number of preconfigured roles, including the cluster-admin role that grants full access and control over the cluster. The cluster does not automatically create <code>RoleBinding</code> and <code>ClusterRoleBinding</code> objects for the groups that are included in your access token; you are responsible for creating those bindings yourself.</p> <p>This example shows how to create a <code>ClusterRoleBinding</code> object that grants members of a Microsoft Azure group the cluster-admin role.</p> <ol> <li> <p>Retrieve the group ID of the group to which you want to grant access.</p> <pre><code>$ GROUP_ID=$(az ad group show --group \"&lt;group-name&gt;\" --query id -o tsv)\n</code></pre> </li> <li> <p>Create the <code>ClusterRoleBinding</code> object to grant the group access to the cluster-admin role.</p> <pre><code>$ oc apply -f - &lt;&lt;EOF\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: aro-admins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: &lt;group-id&gt;\nEOF\n</code></pre> </li> </ol> </li> </ol>"},{"location":"external-auth/#validate-the-external-authentication-configuration","title":"Validate the external authentication configuration","text":"<p>After setting up external authentication for your cluster, you can validate the configuration for the OpenShift CLI and web console.</p>"},{"location":"external-auth/#validate-access-to-the-openshift-web-console","title":"Validate access to the OpenShift web console","text":"<ol> <li> <p>Retrieve the URL for the OpenShift web console.</p> <pre><code>$ az rest --method GET --uri \"/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${CUSTOMER_RG_NAME}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/${CLUSTER_NAME}?api-version=2024-06-10-preview\" | jq -r '.properties.console.url'\n</code></pre> </li> <li> <p>Open the URL in your web browser and sign in.</p> </li> </ol>"},{"location":"external-auth/#validate-access-to-the-openshift-cli","title":"Validate access to the OpenShift CLI","text":"<p>You can use <code>kubelogin</code>, a client-go credential plugin, to authenticate to your OpenShift cluster using the external authentication provider (Entra ID).</p> <p>Prerequisites</p> <ul> <li>Krew (the <code>kubectl</code> plugin manager). See the installation instructions.  </li> <li><code>kubelogin</code>. See the installation instructions.</li> </ul> <p>To validate access to the CLI:</p> <ol> <li> <p>Set the OIDC configuration in the <code>kubeconfig</code> that you used to access the cluster.</p> <pre><code>$ oc config set-credentials oidc \\\n  --exec-api-version=\"client.authentication.k8s.io/v1beta1\" \\\n  --exec-command=\"kubectl\" \\\n  --exec-arg=\"oidc-login\" \\\n  --exec-arg=\"get-token\" \\\n  --exec-arg=\"--oidc-issuer-url=$ISSUER_URL\" \\\n  --exec-arg=\"--oidc-client-id=$CLIENT_ID\" \\\n  --exec-arg=\"--oidc-client-secret=$CLIENT_SECRET\"\n</code></pre> </li> <li> <p>Create a new context for the OIDC configuration.</p> <pre><code>$ oc config set-context oidc --cluster=cluster --namespace=default --user=oidc\n</code></pre> </li> <li> <p>Switch to the new context.</p> <pre><code>$ oc config use-context oidc\n</code></pre> </li> <li> <p>Enter a command and then log in to verify access to the cluster.</p> <pre><code>$ oc get nodes --insecure-skip-tls-verify\n</code></pre> </li> <li> <p>Verify your credentials.</p> <pre><code>$ oc auth whoami --insecure-skip-tls-verify\nATTRIBUTE    VALUE\nUsername     user@email.com\nGroups       [&lt;group-id&gt; system:authenticated]\n</code></pre> </li> </ol>"},{"location":"get-audit-logs/","title":"Get audit logs from Shoebox","text":"<p>TODO</p>"},{"location":"introduction/","title":"Microsoft Azure Red Hat OpenShift with hosted control planes","text":"<p>The Microsoft Azure Red Hat OpenShift with hosted control planes service is a fully-managed turnkey application platform that allows you to focus on what matters most, delivering value to your customers by building and deploying applications. Red Hat and Microsoft SRE experts manage the underlying platform so you do not have to worry about infrastructure management. Azure Red Hat OpenShift with hosted control planes provides seamless integration with a wide range of Azure compute, database, analytics, machine learning, networking, mobile, and other services to further accelerate the building and delivering of differentiating experiences to your customers.</p> <p>Azure Red Hat OpenShift with hosted control planes offers a reduced-cost solution to create an Azure Red Hat OpenShift with hosted control planes cluster with a focus on efficiency. You can quickly create a new cluster and deploy applications in minutes.</p> <p>You subscribe to the service directly from your Azure account. After you create clusters, you can operate your clusters with the OpenShift web console, the Azure CLI, or the Azure Red Hat OpenShift REST API.</p> <p>You receive OpenShift updates with new feature releases and a shared, common source for alignment with OpenShift Container Platform.</p> <p>Azure Red Hat OpenShift with hosted control planes uses user-assigned managed identities to obtain credentials to manage infrastructure in your Azure account.</p>"},{"location":"introduction/#cluster-node-scaling","title":"Cluster node scaling","text":"<p>Microsoft Azure Red Hat OpenShift with hosted control planes requires a minimum of only two nodes, making it ideal for smaller projects while still being able to scale to support larger projects and enterprises. Easily add or remove compute nodes to match resource demand. Autoscaling allows you to automatically adjust the size of the cluster based on the current workload.</p>"},{"location":"introduction/#fully-managed-underlying-control-plane-infrastructure","title":"Fully managed underlying control plane infrastructure","text":"<p>Control plane components, such as the API server and etcd database, are hosted in a Red Hat-owned Azure account.</p>"},{"location":"introduction/#flexible-consumption-based-pricing","title":"Flexible, consumption-based pricing","text":"<p>Scale to your business needs and pay as you go with flexible pricing and an on-demand hourly or annual billing model.</p>"},{"location":"introduction/#single-bill-for-red-hat-openshift-and-azure-usage","title":"Single bill for Red Hat OpenShift and Azure usage","text":"<p>Customers will receive a single bill from Microsoft for both Red Hat OpenShift and Azure consumption.</p>"},{"location":"introduction/#fully-integrated-support-experience","title":"Fully integrated support experience","text":"<p>Installation, management, maintenance, and upgrades are performed by Red Hat site reliability engineers (SREs) with joint Red Hat and Microsoft support and a 99.95% service-level agreement (SLA).</p>"},{"location":"introduction/#azure-service-integration","title":"Azure service integration","text":"<p>Azure has a robust portfolio of cloud services, such as compute, storage, networking, database, analytics, and machine learning. All of these services are directly accessible through Azure Red Hat OpenShift with hosted control planes. This makes it easier to build, operate, and scale globally and on-demand through a familiar management interface.</p>"},{"location":"introduction/#maximum-availability","title":"Maximum availability","text":"<p>Deploy node pools across multiple availability zones in supported regions to maximize availability and maintain high availability for your most demanding mission-critical applications and data.</p>"},{"location":"introduction/#optimized-clusters","title":"Optimized clusters","text":"<p>Choose from memory-optimized, compute-optimized, or general purpose virtual machine sizes with clusters sized to meet your needs.</p>"},{"location":"resize-cluster/","title":"Resize a cluster by adding or removing nodes","text":""},{"location":"resize-cluster/#add-a-node-pool","title":"Add a node pool","text":""},{"location":"resize-cluster/#resize-a-node-pool","title":"Resize a node pool","text":""},{"location":"resize-cluster/#configure-the-cluster-to-scale-automatically","title":"Configure the cluster to scale automatically","text":""},{"location":"resize-cluster/#delete-a-node-pool","title":"Delete a node pool","text":""},{"location":"service-def/","title":"Microsoft Azure Red Hat OpenShift with hosted control planes service definition","text":"<p>This documentation outlines the service definition for the Microsoft Azure Red Hat OpenShift with hosted control planes managed service.</p>"},{"location":"service-def/#account-management","title":"Account management","text":"<p>This section provides information about the service definition for Azure Red Hat OpenShift with hosted control planes account management.</p>"},{"location":"service-def/#billing-and-pricing","title":"Billing and pricing","text":"<p>Azure Red Hat OpenShift with hosted control planes is billed directly to your Azure account. Azure Red Hat OpenShift with hosted control planes pricing is consumption based, with annual commitments or three-year commitments for greater discounting. The total cost of Azure Red Hat OpenShift with hosted control planes consists of two components:</p> <ul> <li>Azure Red Hat OpenShift with hosted control planes service fees  </li> <li>Azure infrastructure fees</li> </ul> <p>Visit the Microsoft Azure Red Hat Openshift pricing page for more details. </p>"},{"location":"service-def/#cluster-self-service","title":"Cluster self-service","text":"<p>Customers can self-service their clusters, including, but not limited to:</p> <ul> <li>Create a cluster  </li> <li>Delete a cluster  </li> <li>Add or remove an identity provider  </li> <li>Add or remove a user from an elevated group  </li> <li>Configure cluster privacy  </li> <li>Add or remove node pools and configure autoscaling</li> </ul> <p>You can perform these self-service tasks using the Microsoft Azure Red Hat Openshift APIs, Azure CLI, or Azure Portal. </p> <p>Additional resources</p> <ul> <li>Red Hat Operator support</li> </ul>"},{"location":"service-def/#azure-compute-types","title":"Azure compute types","text":"<p>All Azure Red Hat OpenShift with hosted control planes clusters require a minimum of 2 worker nodes. Shutting down the underlying infrastructure through the cloud provider console is unsupported and can lead to data loss.</p> <p>Note</p> <p>Approximately one vCPU core and 1 GiB of memory are reserved on each worker node and removed from allocatable resources. This reservation of resources is necessary to run processes required by the underlying platform. These processes include system daemons such as udev, kubelet, and container runtime among others. The reserved resources also account for kernel reservations. OpenShift Container Platform core systems such as audit log aggregation, metrics collection, DNS, image registry, SDN, and others might consume additional allocatable resources to maintain the stability and maintainability of the cluster. The additional resources consumed might vary based on usage. For additional information, see the Kubernetes documentation.</p> <p>Additional resources</p> <ul> <li>For a detailed listing of supported compute types, see Sizes for virtual machines in Azure.</li> </ul>"},{"location":"service-def/#regions-and-availability-zones","title":"Regions and availability zones","text":"<p>The following Azure regions are currently available for Azure Red Hat OpenShift with hosted control planes:</p> <ul> <li>UK South  </li> <li>Canada Central  </li> <li>Australia East  </li> <li>Switzerland North  </li> <li>Brazil South  </li> <li>Central India</li> </ul> <p>Warning</p> <p>The region cannot be changed after a cluster has been deployed.</p>"},{"location":"service-def/#service-level-agreement-sla","title":"Service Level Agreement (SLA)","text":"<p>Any SLAs for the service itself are defined in Appendix 4 of the Red Hat Enterprise Agreement Appendix 4 (Online Subscription Services).</p>"},{"location":"service-def/#limited-support-status","title":"Limited support status","text":"<p>When a cluster transitions to a Limited Support status, Red Hat no longer proactively monitors the cluster, the SLA is no longer applicable, and credits requested against the SLA are denied. It does not mean that you no longer have product support. In some cases, the cluster can return to a fully-supported status if you remediate the violating factors. However, in other cases, you might have to delete and recreate the cluster.</p> <p>A cluster might move to a Limited Support status for many reasons, including the following scenarios:</p> <p>If you remove or replace any native Azure Red Hat OpenShift with hosted control planes components or any other component that is installed and managed by Red Hat If cluster administrator permissions were used, Red Hat is not responsible for any of your or your authorized users' actions, including those that affect infrastructure services, service availability, or data loss. If Red Hat detects any such actions, the cluster might transition to a Limited Support status. Red Hat notifies you of the status change and you should either revert the action or create a support case to explore remediation steps that might require you to delete and recreate the cluster.</p> <p>If you have questions about a specific action that might cause a cluster to move to a Limited Support status or need further assistance, open a support ticket.</p>"},{"location":"service-def/#support","title":"Support","text":"<p>Azure Red Hat OpenShift with hosted control planes includes Red Hat Premium Support, which can be accessed by using the Red Hat Customer Portal.</p> <p>See the Red Hat Production Support Terms of Service for support response times.</p> <p>Azure support is subject to a customer's existing support contract with Azure.</p>"},{"location":"service-def/#monitoring","title":"Monitoring","text":"<p>This section provides information about the service definition for Azure Red Hat OpenShift with hosted control planes monitoring.</p>"},{"location":"service-def/#cluster-metrics","title":"Cluster metrics","text":"<p>Azure Red Hat OpenShift with hosted control planes clusters come with an integrated Prometheus stack for cluster monitoring including CPU, memory, and network-based metrics. This is accessible through the web console. These metrics also allow for horizontal pod autoscaling based on CPU or memory metrics provided by an Azure Red Hat OpenShift with hosted control planes user.</p>"},{"location":"service-def/#cluster-notifications","title":"Cluster notifications","text":"<p>Cluster notifications are messages about the status, health, or performance of your cluster.</p> <p>Cluster notifications are the primary way that Red Hat Site Reliability Engineering (SRE) communicates with you about the health of your managed cluster. SRE may also use cluster notifications to prompt you to perform an action in order to resolve or prevent an issue with your cluster.</p> <p>Cluster owners and administrators must regularly review and action cluster notifications to ensure clusters remain healthy and supported.</p> <p>You can view cluster notifications in the Red Hat Hybrid Cloud Console, in the Cluster history tab for your cluster. By default, only the cluster owner receives cluster notifications as emails. If other users need to receive cluster notification emails, add each user as a notification contact for your cluster.</p>"},{"location":"service-def/#networking","title":"Networking","text":"<p>This section provides information about the service definition for Azure Red Hat OpenShift with hosted control planes networking.</p>"},{"location":"service-def/#custom-domains-for-applications","title":"Custom domains for applications","text":"<p>Warning</p> <p>Starting with Azure Red Hat OpenShift with hosted control planes 4.14, the Custom Domain Operator is deprecated. To manage Ingress in Azure Red Hat OpenShift with hosted control planes 4.14 or later, use the Ingress Operator. The functionality is unchanged for Azure Red Hat OpenShift with hosted control planes 4.13 and earlier versions.</p> <p>To use a custom hostname for a route, you must update your DNS provider by creating a canonical name (CNAME) record. Your CNAME record should map the OpenShift canonical router hostname to your custom domain. The OpenShift canonical router hostname is shown on the Route Details page after a route is created. Alternatively, a wildcard CNAME record can be created once to route all subdomains for a given hostname to the cluster's router.</p>"},{"location":"service-def/#domain-validated-certificates","title":"Domain validated certificates","text":"<p>Azure Red Hat OpenShift with hosted control planes includes TLS security certificates needed for both internal and external services on the cluster. For external routes, there are two separate TLS wildcard certificates that are provided and installed on each cluster: one is for the web console and route default hostnames, and the other is for the API endpoint. OneCert is the certificate authority used for certificates. Routes within the cluster, such as the internal API endpoint, use TLS certificates signed by the cluster's built-in certificate authority and require the CA bundle available in every pod for trusting the TLS certificate.</p>"},{"location":"service-def/#custom-certificate-authorities-for-builds","title":"Custom certificate authorities for builds","text":"<p>Azure Red Hat OpenShift with hosted control planes supports the use of custom certificate authorities to be trusted by builds when pulling images from an image registry.</p>"},{"location":"service-def/#load-balancers","title":"Load balancers","text":"<p>Azure Red Hat OpenShift with hosted control planes only deploys load balancers from the default ingress controller. All other load balancers can be optionally deployed by a customer for secondary ingress controllers or Service load balancers.</p>"},{"location":"service-def/#cluster-ingress","title":"Cluster ingress","text":"<p>Project administrators can add route annotations for many different purposes, including ingress control through IP allow-listing.</p> <p>Ingress policies can also be changed by using <code>NetworkPolicy</code> objects, which leverage the <code>ovs-networkpolicy</code> plugin. This allows for full control over the ingress network policy down to the pod level, including between pods on the same cluster and even in the same namespace.</p> <p>All cluster ingress traffic will go through the defined load balancers. Direct access to all nodes is blocked by cloud configuration.</p>"},{"location":"service-def/#cluster-egress","title":"Cluster egress","text":"<p>Pod egress traffic control through <code>EgressNetworkPolicy</code> objects can be used to prevent or limit outbound traffic in Azure Red Hat OpenShift with hosted control planes.</p>"},{"location":"service-def/#cloud-network-configuration","title":"Cloud network configuration","text":"<p>Azure Red Hat OpenShift with hosted control planes allows for the configuration of a private network connection through Azure services, such as:</p> <ul> <li>Vnet    </li> <li>Vnet peering  </li> <li>Transit Gateway  </li> <li>Direct Connect</li> </ul> <p>Important</p> <p>Red Hat site reliability engineers (SREs) do not monitor private network connections. Monitoring these connections is the responsibility of the customer.</p>"},{"location":"service-def/#dns-forwarding","title":"DNS forwarding","text":"<p>Azure Red Hat OpenShift with hosted control planes clusters that have a private cloud network configuration, a customer can specify internal DNS servers available on that private connection, that should be queried for explicitly provided domains.</p>"},{"location":"service-def/#network-verification","title":"Network verification","text":"<p>Network verification checks run automatically when you deploy a Azure Red Hat OpenShift with hosted control planes cluster into an existing Virtual Private Cloud (VPC) or create an additional machine pool with a subnet that is new to your cluster. The checks validate your network configuration and highlight errors, enabling you to resolve configuration issues prior to deployment.</p> <p>You can also run the network verification checks manually to validate the configuration for an existing cluster.</p>"},{"location":"service-def/#storage","title":"Storage","text":"<p>This section provides information about the service definition for Azure Red Hat OpenShift with hosted control planes storage.</p>"},{"location":"service-def/#encrypted-at-rest-os-and-node-storage","title":"Encrypted-at-rest OS and node storage","text":"<p>Worker nodes use encrypted-at-rest Amazon Elastic Block Store (Amazon EBS) storage.</p>"},{"location":"service-def/#encrypted-at-rest-pv","title":"Encrypted-at-rest PV","text":"<p>EBS volumes that are used for PVs are encrypted-at-rest by default.</p>"},{"location":"service-def/#block-storage-rwo","title":"Block storage (RWO)","text":"<p>Persistent volumes (PVs) are backed by Azure Disk which is Read-Write-Once.</p> <p>PVs can be attached only to a single node at a time and are specific to the availability zone in which they were provisioned. However, PVs can be attached to any node in the availability zone.</p> <p>Each cloud provider has its own limits for how many PVs can be attached to a single node. See the specific instance types for documented maximums </p>"},{"location":"service-def/#shared-storage-rwx","title":"Shared Storage (RWX)","text":"<p>The Azure Files CSI Driver can be used to provide RWX support for Azure Red Hat OpenShift with hosted control planes. A Red Hat Operator is provided and installed to simplify usage.</p>"},{"location":"service-def/#platform","title":"Platform","text":"<p>This section provides information about the service definition for the Azure Red Hat OpenShift with hosted control planes platform.</p>"},{"location":"service-def/#autoscaling","title":"Autoscaling","text":"<p>Node autoscaling is available on Azure Red Hat OpenShift with hosted control planes. You can configure the autoscaler option to automatically scale the number of machines in a cluster.</p>"},{"location":"service-def/#daemonsets","title":"Daemonsets","text":"<p>Customers can create and run daemonsets on Azure Red Hat OpenShift with hosted control planes. To restrict daemonsets to only running on worker nodes, use the following <code>nodeSelector</code>:</p> <pre><code>spec:\n  nodeSelector:\n    role: worker\n</code></pre>"},{"location":"service-def/#node-labels","title":"Node labels","text":"<p>Custom node labels are created by Red Hat during node creation and cannot be changed on Azure Red Hat OpenShift with hosted control planes clusters at this time. However, custom labels are supported when creating new machine pools.</p>"},{"location":"service-def/#node-lifecycle","title":"Node lifecycle","text":"<p>Worker nodes are not guaranteed longevity, and may be replaced at any time as part of the normal operation and management of OpenShift.</p> <p>A worker node might be replaced in the following circumstances:</p> <ul> <li>Machine health checks are deployed and configured to ensure that a worker node with a <code>NotReady</code> status is replaced to ensure smooth operation of the cluster.  </li> <li>An Azure instance may be terminated when Azure detects irreparable failure of the underlying hardware that hosts the instance.  </li> <li>During upgrades, a new, upgraded node is first created and joined to the cluster. Once this new node has been successfully integrated into the cluster via the previously described automated health checks, an older node is then removed from the cluster.</li> </ul> <p>For all containerized workloads running on a Kubernetes based system, it is best practice to configure applications to be resilient of node replacements.</p>"},{"location":"service-def/#cluster-backup-policy","title":"Cluster backup policy","text":"<p>Red Hat recommends object-level backup solutions for Azure Red Hat OpenShift with hosted control planes clusters. OpenShift API for Data Protection (OADP) is included in OpenShift but not enabled by default. Customers can configure OADP on their clusters to achieve object-level backup and restore capabilities.</p> <p>Red Hat does not back up customer applications or application data. Customers are solely responsible for applications and their data, and must put their own backup and restore capabilities in place.</p> <p>Warning</p> <p>Customers are solely responsible for backing up and restoring their applications and application data. For more information about customer responsibilities, see \"Shared responsibility matrix\".</p>"},{"location":"service-def/#openshift-version","title":"OpenShift version","text":"<p>Azure Red Hat OpenShift with hosted control planes is run as a service and is kept up to date with the latest OpenShift Container Platform version. Upgrade scheduling to the latest version is available.</p>"},{"location":"service-def/#windows-containers","title":"Windows Containers","text":"<p>Red Hat OpenShift support for Windows Containers is not available on Azure Red Hat OpenShift with hosted control planes at this time.</p>"},{"location":"service-def/#container-engine","title":"Container engine","text":"<p>Azure Red Hat OpenShift with hosted control planes runs on OpenShift 4 and uses CRI-O as the only available container engine.</p>"},{"location":"service-def/#operating-system","title":"Operating system","text":"<p>Azure Red Hat OpenShift with hosted control planes runs on OpenShift 4 and uses Red Hat CoreOS as the operating system for all control plane and worker nodes.</p>"},{"location":"service-def/#red-hat-operator-support","title":"Red Hat Operator support","text":"<p>Red Hat workloads typically refer to Red Hat-provided Operators made available through Operator Hub. Red Hat workloads are not managed by the Red Hat SRE team, and must be deployed on worker nodes. These Operators may require additional Red Hat subscriptions, and may incur additional cloud infrastructure costs. Examples of these Red Hat-provided Operators are:</p> <ul> <li>Red Hat Quay  </li> <li>Red Hat Advanced Cluster Management  </li> <li>Red Hat Advanced Cluster Security  </li> <li>Red Hat OpenShift Service Mesh  </li> <li>OpenShift Serverless  </li> <li>Red Hat OpenShift Logging  </li> <li>Red Hat OpenShift Pipelines</li> </ul>"},{"location":"service-def/#kubernetes-operator-support","title":"Kubernetes Operator support","text":"<p>All Operators listed in the OperatorHub marketplace should be available for installation. These Operators are considered customer workloads, and are not monitored by Red Hat SRE.</p>"},{"location":"service-def/#security","title":"Security","text":"<p>This section provides information about the service definition for Azure Red Hat OpenShift with hosted control planes security.</p>"},{"location":"service-def/#authentication-provider","title":"Authentication provider","text":"<p>Authentication for the cluster can be configured using either ARM API or Azure CLI. Azure Red Hat OpenShift with hosted control planes is not an identity provider, and all access to the cluster must be managed by the customer as part of their integrated solution. The use of multiple identity providers provisioned at the same time is supported.</p>"},{"location":"service-def/#privileged-containers","title":"Privileged containers","text":"<p>Privileged containers are available for users with the <code>cluster-admin</code> role. Usage of privileged containers as <code>cluster-admin</code> is subject to the responsibilities and exclusion notes in the Red Hat Enterprise Agreement Appendix 4 (Online Subscription Services).</p>"},{"location":"service-def/#cluster-administration-role","title":"Cluster administration role","text":"<p>The administrator of Azure Red Hat OpenShift with hosted control planes has default access to the <code>cluster-admin</code> role for your organization\u2019s cluster. While logged into an account with the <code>cluster-admin</code> role, users have increased permissions to run privileged security contexts.</p>"},{"location":"service-def/#project-self-service","title":"Project self-service","text":"<p>By default, all users have the ability to create, update, and delete their projects. This can be restricted if a member of the <code>dedicated-admin</code> group removes the <code>self-provisioner</code> role from authenticated users:</p> <pre><code>$ oc adm policy remove-cluster-role-from-group self-provisioner system:authenticated:oauth\n</code></pre> <p>Restrictions can be reverted by applying:</p> <pre><code>$ oc adm policy add-cluster-role-to-group self-provisioner system:authenticated:oauth\n</code></pre>"},{"location":"service-def/#network-security","title":"Network security","text":"<p>With Azure Red Hat OpenShift with hosted control planes, Azure provides a standard DDoS protection on all load balancers, called Azure DDoS. This provides 95% protection against most commonly used level 3 and 4 attacks on all the public facing load balancers used for Azure Red Hat OpenShift with hosted control planes. A 10-second timeout is added for HTTP requests coming to the <code>haproxy</code> router to receive a response or the connection is closed to provide additional protection.</p>"},{"location":"service-def/#virtual-machine-sizes","title":"Virtual machine sizes","text":"<p>For a list of available worker node virtual machine types and sizes, see Worker nodes.</p> <p>Note</p> <p>Microsoft Azure Red Hat OpenShift with hosted control planes supports a maximum of 500 worker nodes. |</p>"},{"location":"upgrade-cluster/","title":"Upgrade a cluster","text":"<p>TODO</p>"}]}